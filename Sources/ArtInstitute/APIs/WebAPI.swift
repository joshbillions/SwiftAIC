//
// WebAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class WebAPI {
    /**
     A list of all articles sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func articlesGet(completion: @escaping ((_ data: [Article]?,_ error: Error?) -> Void)) {
        articlesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all articles sorted by last updated date in descending order.
     - GET /articles
     - examples: [{contentType=application/json, example=[ {
  "date" : { },
  "last_updated" : { },
  "is_published" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "publish_end_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "publish_start_date" : { },
  "api_link" : { },
  "id" : { },
  "copy" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "date" : { },
  "last_updated" : { },
  "is_published" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "publish_end_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "publish_start_date" : { },
  "api_link" : { },
  "id" : { },
  "copy" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]

     - returns: RequestBuilder<[Article]> 
     */
    open class func articlesGetWithRequestBuilder() -> RequestBuilder<[Article]> {
        let path = "/articles"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Article]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single article by the given identifier.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func articlesIdGet(_id: String, completion: @escaping ((_ data: [Article]?,_ error: Error?) -> Void)) {
        articlesIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single article by the given identifier.
     - GET /articles/{id}
     - examples: [{contentType=application/json, example=[ {
  "date" : { },
  "last_updated" : { },
  "is_published" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "publish_end_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "publish_start_date" : { },
  "api_link" : { },
  "id" : { },
  "copy" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "date" : { },
  "last_updated" : { },
  "is_published" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "publish_end_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "publish_start_date" : { },
  "api_link" : { },
  "id" : { },
  "copy" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[Article]> 
     */
    open class func articlesIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[Article]> {
        var path = "/articles/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Article]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search articles data in the aggregator. 
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func articlesSearchGet(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil, completion: @escaping ((_ data: [SearchResult]?,_ error: Error?) -> Void)) {
        articlesSearchGetWithRequestBuilder(q: q, query: query, sort: sort, from: from, size: size, facets: facets).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search articles data in the aggregator. 
     - GET /articles/search
     - examples: [{contentType=application/json, example=[ {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
}, {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
} ]}]
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)

     - returns: RequestBuilder<[SearchResult]> 
     */
    open class func articlesSearchGetWithRequestBuilder(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil) -> RequestBuilder<[SearchResult]> {
        let path = "/articles/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "query": query, 
                        "sort": sort, 
                        "from": from, 
                        "size": size, 
                        "facets": facets
        ])

        let requestBuilder: RequestBuilder<[SearchResult]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all closures sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func closuresGet(completion: @escaping ((_ data: [Closure]?,_ error: Error?) -> Void)) {
        closuresGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all closures sorted by last updated date in descending order.
     - GET /closures
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "date_end" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "closure_copy" : { },
  "date_start" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "date_end" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "closure_copy" : { },
  "date_start" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]

     - returns: RequestBuilder<[Closure]> 
     */
    open class func closuresGetWithRequestBuilder() -> RequestBuilder<[Closure]> {
        let path = "/closures"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Closure]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single closure by the given identifier.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func closuresIdGet(_id: String, completion: @escaping ((_ data: [Closure]?,_ error: Error?) -> Void)) {
        closuresIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single closure by the given identifier.
     - GET /closures/{id}
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "date_end" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "closure_copy" : { },
  "date_start" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "date_end" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "closure_copy" : { },
  "date_start" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[Closure]> 
     */
    open class func closuresIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[Closure]> {
        var path = "/closures/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Closure]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search closures data in the aggregator. 
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func closuresSearchGet(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil, completion: @escaping ((_ data: [SearchResult]?,_ error: Error?) -> Void)) {
        closuresSearchGetWithRequestBuilder(q: q, query: query, sort: sort, from: from, size: size, facets: facets).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search closures data in the aggregator. 
     - GET /closures/search
     - examples: [{contentType=application/json, example=[ {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
}, {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
} ]}]
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)

     - returns: RequestBuilder<[SearchResult]> 
     */
    open class func closuresSearchGetWithRequestBuilder(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil) -> RequestBuilder<[SearchResult]> {
        let path = "/closures/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "query": query, 
                        "sort": sort, 
                        "from": from, 
                        "size": size, 
                        "facets": facets
        ])

        let requestBuilder: RequestBuilder<[SearchResult]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all digital-catalogs sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func digitalCatalogsGet(completion: @escaping ((_ data: [DigitalCatalog]?,_ error: Error?) -> Void)) {
        digitalCatalogsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all digital-catalogs sorted by last updated date in descending order.
     - GET /digital-catalogs
     - examples: [{contentType=application/json, example=[ {
  "short_description" : { },
  "last_updated" : { },
  "listing_description" : { },
  "is_published" : { },
  "image_url" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "publish_end_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "publish_start_date" : { },
  "api_link" : { },
  "id" : { },
  "copy" : { },
  "last_updated_source" : { },
  "slug" : { },
  "timestamp" : { }
}, {
  "short_description" : { },
  "last_updated" : { },
  "listing_description" : { },
  "is_published" : { },
  "image_url" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "publish_end_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "publish_start_date" : { },
  "api_link" : { },
  "id" : { },
  "copy" : { },
  "last_updated_source" : { },
  "slug" : { },
  "timestamp" : { }
} ]}]

     - returns: RequestBuilder<[DigitalCatalog]> 
     */
    open class func digitalCatalogsGetWithRequestBuilder() -> RequestBuilder<[DigitalCatalog]> {
        let path = "/digital-catalogs"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[DigitalCatalog]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single digital-catalog by the given identifier.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func digitalCatalogsIdGet(_id: String, completion: @escaping ((_ data: [DigitalCatalog]?,_ error: Error?) -> Void)) {
        digitalCatalogsIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single digital-catalog by the given identifier.
     - GET /digital-catalogs/{id}
     - examples: [{contentType=application/json, example=[ {
  "short_description" : { },
  "last_updated" : { },
  "listing_description" : { },
  "is_published" : { },
  "image_url" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "publish_end_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "publish_start_date" : { },
  "api_link" : { },
  "id" : { },
  "copy" : { },
  "last_updated_source" : { },
  "slug" : { },
  "timestamp" : { }
}, {
  "short_description" : { },
  "last_updated" : { },
  "listing_description" : { },
  "is_published" : { },
  "image_url" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "publish_end_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "publish_start_date" : { },
  "api_link" : { },
  "id" : { },
  "copy" : { },
  "last_updated_source" : { },
  "slug" : { },
  "timestamp" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[DigitalCatalog]> 
     */
    open class func digitalCatalogsIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[DigitalCatalog]> {
        var path = "/digital-catalogs/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[DigitalCatalog]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search digital-catalogs data in the aggregator. 
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func digitalCatalogsSearchGet(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil, completion: @escaping ((_ data: [SearchResult]?,_ error: Error?) -> Void)) {
        digitalCatalogsSearchGetWithRequestBuilder(q: q, query: query, sort: sort, from: from, size: size, facets: facets).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search digital-catalogs data in the aggregator. 
     - GET /digital-catalogs/search
     - examples: [{contentType=application/json, example=[ {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
}, {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
} ]}]
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)

     - returns: RequestBuilder<[SearchResult]> 
     */
    open class func digitalCatalogsSearchGetWithRequestBuilder(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil) -> RequestBuilder<[SearchResult]> {
        let path = "/digital-catalogs/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "query": query, 
                        "sort": sort, 
                        "from": from, 
                        "size": size, 
                        "facets": facets
        ])

        let requestBuilder: RequestBuilder<[SearchResult]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all educator-resources sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func educatorResourcesGet(completion: @escaping ((_ data: [EducatorResource]?,_ error: Error?) -> Void)) {
        educatorResourcesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all educator-resources sorted by last updated date in descending order.
     - GET /educator-resources
     - examples: [{contentType=application/json, example=[ {
  "short_description" : { },
  "last_updated" : { },
  "listing_description" : { },
  "is_published" : { },
  "image_url" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "publish_end_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "publish_start_date" : { },
  "api_link" : { },
  "id" : { },
  "copy" : { },
  "last_updated_source" : { },
  "slug" : { },
  "timestamp" : { }
}, {
  "short_description" : { },
  "last_updated" : { },
  "listing_description" : { },
  "is_published" : { },
  "image_url" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "publish_end_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "publish_start_date" : { },
  "api_link" : { },
  "id" : { },
  "copy" : { },
  "last_updated_source" : { },
  "slug" : { },
  "timestamp" : { }
} ]}]

     - returns: RequestBuilder<[EducatorResource]> 
     */
    open class func educatorResourcesGetWithRequestBuilder() -> RequestBuilder<[EducatorResource]> {
        let path = "/educator-resources"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[EducatorResource]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single educator-resource by the given identifier.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func educatorResourcesIdGet(_id: String, completion: @escaping ((_ data: [EducatorResource]?,_ error: Error?) -> Void)) {
        educatorResourcesIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single educator-resource by the given identifier.
     - GET /educator-resources/{id}
     - examples: [{contentType=application/json, example=[ {
  "short_description" : { },
  "last_updated" : { },
  "listing_description" : { },
  "is_published" : { },
  "image_url" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "publish_end_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "publish_start_date" : { },
  "api_link" : { },
  "id" : { },
  "copy" : { },
  "last_updated_source" : { },
  "slug" : { },
  "timestamp" : { }
}, {
  "short_description" : { },
  "last_updated" : { },
  "listing_description" : { },
  "is_published" : { },
  "image_url" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "publish_end_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "publish_start_date" : { },
  "api_link" : { },
  "id" : { },
  "copy" : { },
  "last_updated_source" : { },
  "slug" : { },
  "timestamp" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[EducatorResource]> 
     */
    open class func educatorResourcesIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[EducatorResource]> {
        var path = "/educator-resources/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[EducatorResource]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search educator-resources data in the aggregator. 
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func educatorResourcesSearchGet(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil, completion: @escaping ((_ data: [SearchResult]?,_ error: Error?) -> Void)) {
        educatorResourcesSearchGetWithRequestBuilder(q: q, query: query, sort: sort, from: from, size: size, facets: facets).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search educator-resources data in the aggregator. 
     - GET /educator-resources/search
     - examples: [{contentType=application/json, example=[ {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
}, {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
} ]}]
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)

     - returns: RequestBuilder<[SearchResult]> 
     */
    open class func educatorResourcesSearchGetWithRequestBuilder(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil) -> RequestBuilder<[SearchResult]> {
        let path = "/educator-resources/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "query": query, 
                        "sort": sort, 
                        "from": from, 
                        "size": size, 
                        "facets": facets
        ])

        let requestBuilder: RequestBuilder<[SearchResult]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all event-occurrences sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func eventOccurrencesGet(completion: @escaping ((_ data: [EventOccurrence]?,_ error: Error?) -> Void)) {
        eventOccurrencesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all event-occurrences sorted by last updated date in descending order.
     - GET /event-occurrences
     - examples: [{contentType=application/json, example=[ {
  "is_private" : { },
  "short_description" : { },
  "end_at" : { },
  "last_updated" : { },
  "image_url" : { },
  "button_url" : { },
  "description" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "start_at" : { },
  "button_caption" : { },
  "event_id" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "location" : { },
  "id" : { },
  "button_text" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "is_private" : { },
  "short_description" : { },
  "end_at" : { },
  "last_updated" : { },
  "image_url" : { },
  "button_url" : { },
  "description" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "start_at" : { },
  "button_caption" : { },
  "event_id" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "location" : { },
  "id" : { },
  "button_text" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]

     - returns: RequestBuilder<[EventOccurrence]> 
     */
    open class func eventOccurrencesGetWithRequestBuilder() -> RequestBuilder<[EventOccurrence]> {
        let path = "/event-occurrences"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[EventOccurrence]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single event-occurrence by the given identifier.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func eventOccurrencesIdGet(_id: String, completion: @escaping ((_ data: [EventOccurrence]?,_ error: Error?) -> Void)) {
        eventOccurrencesIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single event-occurrence by the given identifier.
     - GET /event-occurrences/{id}
     - examples: [{contentType=application/json, example=[ {
  "is_private" : { },
  "short_description" : { },
  "end_at" : { },
  "last_updated" : { },
  "image_url" : { },
  "button_url" : { },
  "description" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "start_at" : { },
  "button_caption" : { },
  "event_id" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "location" : { },
  "id" : { },
  "button_text" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "is_private" : { },
  "short_description" : { },
  "end_at" : { },
  "last_updated" : { },
  "image_url" : { },
  "button_url" : { },
  "description" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "start_at" : { },
  "button_caption" : { },
  "event_id" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "location" : { },
  "id" : { },
  "button_text" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[EventOccurrence]> 
     */
    open class func eventOccurrencesIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[EventOccurrence]> {
        var path = "/event-occurrences/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[EventOccurrence]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search event-occurrences data in the aggregator. 
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func eventOccurrencesSearchGet(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil, completion: @escaping ((_ data: [SearchResult]?,_ error: Error?) -> Void)) {
        eventOccurrencesSearchGetWithRequestBuilder(q: q, query: query, sort: sort, from: from, size: size, facets: facets).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search event-occurrences data in the aggregator. 
     - GET /event-occurrences/search
     - examples: [{contentType=application/json, example=[ {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
}, {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
} ]}]
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)

     - returns: RequestBuilder<[SearchResult]> 
     */
    open class func eventOccurrencesSearchGetWithRequestBuilder(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil) -> RequestBuilder<[SearchResult]> {
        let path = "/event-occurrences/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "query": query, 
                        "sort": sort, 
                        "from": from, 
                        "size": size, 
                        "facets": facets
        ])

        let requestBuilder: RequestBuilder<[SearchResult]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all event-programs sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func eventProgramsGet(completion: @escaping ((_ data: [EventProgram]?,_ error: Error?) -> Void)) {
        eventProgramsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all event-programs sorted by last updated date in descending order.
     - GET /event-programs
     - examples: [{contentType=application/json, example=[ {
  "is_event_host" : { },
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "is_affiliate_group" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "is_event_host" : { },
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "is_affiliate_group" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]

     - returns: RequestBuilder<[EventProgram]> 
     */
    open class func eventProgramsGetWithRequestBuilder() -> RequestBuilder<[EventProgram]> {
        let path = "/event-programs"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[EventProgram]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single event-program by the given identifier.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func eventProgramsIdGet(_id: String, completion: @escaping ((_ data: [EventProgram]?,_ error: Error?) -> Void)) {
        eventProgramsIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single event-program by the given identifier.
     - GET /event-programs/{id}
     - examples: [{contentType=application/json, example=[ {
  "is_event_host" : { },
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "is_affiliate_group" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "is_event_host" : { },
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "is_affiliate_group" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[EventProgram]> 
     */
    open class func eventProgramsIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[EventProgram]> {
        var path = "/event-programs/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[EventProgram]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search event-programs data in the aggregator. 
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func eventProgramsSearchGet(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil, completion: @escaping ((_ data: [SearchResult]?,_ error: Error?) -> Void)) {
        eventProgramsSearchGetWithRequestBuilder(q: q, query: query, sort: sort, from: from, size: size, facets: facets).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search event-programs data in the aggregator. 
     - GET /event-programs/search
     - examples: [{contentType=application/json, example=[ {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
}, {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
} ]}]
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)

     - returns: RequestBuilder<[SearchResult]> 
     */
    open class func eventProgramsSearchGetWithRequestBuilder(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil) -> RequestBuilder<[SearchResult]> {
        let path = "/event-programs/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "query": query, 
                        "sort": sort, 
                        "from": from, 
                        "size": size, 
                        "facets": facets
        ])

        let requestBuilder: RequestBuilder<[SearchResult]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all events sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func eventsGet(completion: @escaping ((_ data: [Event]?,_ error: Error?) -> Void)) {
        eventsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all events sorted by last updated date in descending order.
     - GET /events
     - examples: [{contentType=application/json, example=[ {
  "event_host_id" : { },
  "is_ticketed" : { },
  "search_tags" : { },
  "suggest_autocomplete_all" : { },
  "event_type_id" : { },
  "door_time" : { },
  "alt_event_type_ids" : { },
  "ticketed_event_id" : { },
  "id" : { },
  "entrance" : { },
  "last_updated_source" : { },
  "slug" : { },
  "join_url" : { },
  "last_updated" : { },
  "is_admission_required" : { },
  "image_url" : { },
  "alt_audience_ids" : { },
  "published" : { },
  "publish_end_date" : { },
  "start_time" : { },
  "rsvp_link" : { },
  "buy_button_caption" : { },
  "suggest_autocomplete_boosted" : { },
  "buy_button_text" : { },
  "show_presented_by" : { },
  "date_display" : { },
  "program_ids" : { },
  "is_member_exclusive" : { },
  "is_private" : { },
  "end_date" : { },
  "event_host_title" : { },
  "short_description" : { },
  "is_after_hours" : { },
  "description" : { },
  "layout_type" : { },
  "audience_id" : { },
  "title" : { },
  "survey_url" : { },
  "title_display" : { },
  "api_link" : { },
  "start_date" : { },
  "timestamp" : { },
  "hero_caption" : { },
  "is_registration_required" : { },
  "end_time" : { },
  "sponsor_id" : { },
  "list_description" : { },
  "test_emails" : { },
  "api_model" : { },
  "header_description" : { },
  "publish_start_date" : { },
  "is_free" : { },
  "program_titles" : { },
  "location" : { },
  "is_sold_out" : { }
}, {
  "event_host_id" : { },
  "is_ticketed" : { },
  "search_tags" : { },
  "suggest_autocomplete_all" : { },
  "event_type_id" : { },
  "door_time" : { },
  "alt_event_type_ids" : { },
  "ticketed_event_id" : { },
  "id" : { },
  "entrance" : { },
  "last_updated_source" : { },
  "slug" : { },
  "join_url" : { },
  "last_updated" : { },
  "is_admission_required" : { },
  "image_url" : { },
  "alt_audience_ids" : { },
  "published" : { },
  "publish_end_date" : { },
  "start_time" : { },
  "rsvp_link" : { },
  "buy_button_caption" : { },
  "suggest_autocomplete_boosted" : { },
  "buy_button_text" : { },
  "show_presented_by" : { },
  "date_display" : { },
  "program_ids" : { },
  "is_member_exclusive" : { },
  "is_private" : { },
  "end_date" : { },
  "event_host_title" : { },
  "short_description" : { },
  "is_after_hours" : { },
  "description" : { },
  "layout_type" : { },
  "audience_id" : { },
  "title" : { },
  "survey_url" : { },
  "title_display" : { },
  "api_link" : { },
  "start_date" : { },
  "timestamp" : { },
  "hero_caption" : { },
  "is_registration_required" : { },
  "end_time" : { },
  "sponsor_id" : { },
  "list_description" : { },
  "test_emails" : { },
  "api_model" : { },
  "header_description" : { },
  "publish_start_date" : { },
  "is_free" : { },
  "program_titles" : { },
  "location" : { },
  "is_sold_out" : { }
} ]}]

     - returns: RequestBuilder<[Event]> 
     */
    open class func eventsGetWithRequestBuilder() -> RequestBuilder<[Event]> {
        let path = "/events"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Event]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single event by the given identifier.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func eventsIdGet(_id: String, completion: @escaping ((_ data: [Event]?,_ error: Error?) -> Void)) {
        eventsIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single event by the given identifier.
     - GET /events/{id}
     - examples: [{contentType=application/json, example=[ {
  "event_host_id" : { },
  "is_ticketed" : { },
  "search_tags" : { },
  "suggest_autocomplete_all" : { },
  "event_type_id" : { },
  "door_time" : { },
  "alt_event_type_ids" : { },
  "ticketed_event_id" : { },
  "id" : { },
  "entrance" : { },
  "last_updated_source" : { },
  "slug" : { },
  "join_url" : { },
  "last_updated" : { },
  "is_admission_required" : { },
  "image_url" : { },
  "alt_audience_ids" : { },
  "published" : { },
  "publish_end_date" : { },
  "start_time" : { },
  "rsvp_link" : { },
  "buy_button_caption" : { },
  "suggest_autocomplete_boosted" : { },
  "buy_button_text" : { },
  "show_presented_by" : { },
  "date_display" : { },
  "program_ids" : { },
  "is_member_exclusive" : { },
  "is_private" : { },
  "end_date" : { },
  "event_host_title" : { },
  "short_description" : { },
  "is_after_hours" : { },
  "description" : { },
  "layout_type" : { },
  "audience_id" : { },
  "title" : { },
  "survey_url" : { },
  "title_display" : { },
  "api_link" : { },
  "start_date" : { },
  "timestamp" : { },
  "hero_caption" : { },
  "is_registration_required" : { },
  "end_time" : { },
  "sponsor_id" : { },
  "list_description" : { },
  "test_emails" : { },
  "api_model" : { },
  "header_description" : { },
  "publish_start_date" : { },
  "is_free" : { },
  "program_titles" : { },
  "location" : { },
  "is_sold_out" : { }
}, {
  "event_host_id" : { },
  "is_ticketed" : { },
  "search_tags" : { },
  "suggest_autocomplete_all" : { },
  "event_type_id" : { },
  "door_time" : { },
  "alt_event_type_ids" : { },
  "ticketed_event_id" : { },
  "id" : { },
  "entrance" : { },
  "last_updated_source" : { },
  "slug" : { },
  "join_url" : { },
  "last_updated" : { },
  "is_admission_required" : { },
  "image_url" : { },
  "alt_audience_ids" : { },
  "published" : { },
  "publish_end_date" : { },
  "start_time" : { },
  "rsvp_link" : { },
  "buy_button_caption" : { },
  "suggest_autocomplete_boosted" : { },
  "buy_button_text" : { },
  "show_presented_by" : { },
  "date_display" : { },
  "program_ids" : { },
  "is_member_exclusive" : { },
  "is_private" : { },
  "end_date" : { },
  "event_host_title" : { },
  "short_description" : { },
  "is_after_hours" : { },
  "description" : { },
  "layout_type" : { },
  "audience_id" : { },
  "title" : { },
  "survey_url" : { },
  "title_display" : { },
  "api_link" : { },
  "start_date" : { },
  "timestamp" : { },
  "hero_caption" : { },
  "is_registration_required" : { },
  "end_time" : { },
  "sponsor_id" : { },
  "list_description" : { },
  "test_emails" : { },
  "api_model" : { },
  "header_description" : { },
  "publish_start_date" : { },
  "is_free" : { },
  "program_titles" : { },
  "location" : { },
  "is_sold_out" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[Event]> 
     */
    open class func eventsIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[Event]> {
        var path = "/events/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Event]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search events data in the aggregator. 
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func eventsSearchGet(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil, completion: @escaping ((_ data: [SearchResult]?,_ error: Error?) -> Void)) {
        eventsSearchGetWithRequestBuilder(q: q, query: query, sort: sort, from: from, size: size, facets: facets).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search events data in the aggregator. 
     - GET /events/search
     - examples: [{contentType=application/json, example=[ {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
}, {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
} ]}]
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)

     - returns: RequestBuilder<[SearchResult]> 
     */
    open class func eventsSearchGetWithRequestBuilder(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil) -> RequestBuilder<[SearchResult]> {
        let path = "/events/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "query": query, 
                        "sort": sort, 
                        "from": from, 
                        "size": size, 
                        "facets": facets
        ])

        let requestBuilder: RequestBuilder<[SearchResult]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all generic-pages sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func genericPagesGet(completion: @escaping ((_ data: [GenericPage]?,_ error: Error?) -> Void)) {
        genericPagesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all generic-pages sorted by last updated date in descending order.
     - GET /generic-pages
     - examples: [{contentType=application/json, example=[ {
  "short_description" : { },
  "last_updated" : { },
  "listing_description" : { },
  "is_published" : { },
  "image_url" : { },
  "search_tags" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "publish_end_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "publish_start_date" : { },
  "api_link" : { },
  "id" : { },
  "copy" : { },
  "last_updated_source" : { },
  "slug" : { },
  "timestamp" : { }
}, {
  "short_description" : { },
  "last_updated" : { },
  "listing_description" : { },
  "is_published" : { },
  "image_url" : { },
  "search_tags" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "publish_end_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "publish_start_date" : { },
  "api_link" : { },
  "id" : { },
  "copy" : { },
  "last_updated_source" : { },
  "slug" : { },
  "timestamp" : { }
} ]}]

     - returns: RequestBuilder<[GenericPage]> 
     */
    open class func genericPagesGetWithRequestBuilder() -> RequestBuilder<[GenericPage]> {
        let path = "/generic-pages"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[GenericPage]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single generic-page by the given identifier.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func genericPagesIdGet(_id: String, completion: @escaping ((_ data: [GenericPage]?,_ error: Error?) -> Void)) {
        genericPagesIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single generic-page by the given identifier.
     - GET /generic-pages/{id}
     - examples: [{contentType=application/json, example=[ {
  "short_description" : { },
  "last_updated" : { },
  "listing_description" : { },
  "is_published" : { },
  "image_url" : { },
  "search_tags" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "publish_end_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "publish_start_date" : { },
  "api_link" : { },
  "id" : { },
  "copy" : { },
  "last_updated_source" : { },
  "slug" : { },
  "timestamp" : { }
}, {
  "short_description" : { },
  "last_updated" : { },
  "listing_description" : { },
  "is_published" : { },
  "image_url" : { },
  "search_tags" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "publish_end_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "publish_start_date" : { },
  "api_link" : { },
  "id" : { },
  "copy" : { },
  "last_updated_source" : { },
  "slug" : { },
  "timestamp" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[GenericPage]> 
     */
    open class func genericPagesIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[GenericPage]> {
        var path = "/generic-pages/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[GenericPage]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search generic-pages data in the aggregator. 
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func genericPagesSearchGet(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil, completion: @escaping ((_ data: [SearchResult]?,_ error: Error?) -> Void)) {
        genericPagesSearchGetWithRequestBuilder(q: q, query: query, sort: sort, from: from, size: size, facets: facets).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search generic-pages data in the aggregator. 
     - GET /generic-pages/search
     - examples: [{contentType=application/json, example=[ {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
}, {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
} ]}]
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)

     - returns: RequestBuilder<[SearchResult]> 
     */
    open class func genericPagesSearchGetWithRequestBuilder(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil) -> RequestBuilder<[SearchResult]> {
        let path = "/generic-pages/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "query": query, 
                        "sort": sort, 
                        "from": from, 
                        "size": size, 
                        "facets": facets
        ])

        let requestBuilder: RequestBuilder<[SearchResult]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all press-releases sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pressReleasesGet(completion: @escaping ((_ data: [PressRelease]?,_ error: Error?) -> Void)) {
        pressReleasesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all press-releases sorted by last updated date in descending order.
     - GET /press-releases
     - examples: [{contentType=application/json, example=[ {
  "short_description" : { },
  "last_updated" : { },
  "listing_description" : { },
  "is_published" : { },
  "image_url" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "publish_end_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "publish_start_date" : { },
  "api_link" : { },
  "id" : { },
  "copy" : { },
  "last_updated_source" : { },
  "slug" : { },
  "timestamp" : { }
}, {
  "short_description" : { },
  "last_updated" : { },
  "listing_description" : { },
  "is_published" : { },
  "image_url" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "publish_end_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "publish_start_date" : { },
  "api_link" : { },
  "id" : { },
  "copy" : { },
  "last_updated_source" : { },
  "slug" : { },
  "timestamp" : { }
} ]}]

     - returns: RequestBuilder<[PressRelease]> 
     */
    open class func pressReleasesGetWithRequestBuilder() -> RequestBuilder<[PressRelease]> {
        let path = "/press-releases"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[PressRelease]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single press-release by the given identifier.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pressReleasesIdGet(_id: String, completion: @escaping ((_ data: [PressRelease]?,_ error: Error?) -> Void)) {
        pressReleasesIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single press-release by the given identifier.
     - GET /press-releases/{id}
     - examples: [{contentType=application/json, example=[ {
  "short_description" : { },
  "last_updated" : { },
  "listing_description" : { },
  "is_published" : { },
  "image_url" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "publish_end_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "publish_start_date" : { },
  "api_link" : { },
  "id" : { },
  "copy" : { },
  "last_updated_source" : { },
  "slug" : { },
  "timestamp" : { }
}, {
  "short_description" : { },
  "last_updated" : { },
  "listing_description" : { },
  "is_published" : { },
  "image_url" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "publish_end_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "publish_start_date" : { },
  "api_link" : { },
  "id" : { },
  "copy" : { },
  "last_updated_source" : { },
  "slug" : { },
  "timestamp" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[PressRelease]> 
     */
    open class func pressReleasesIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[PressRelease]> {
        var path = "/press-releases/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[PressRelease]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search press-releases data in the aggregator. 
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pressReleasesSearchGet(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil, completion: @escaping ((_ data: [SearchResult]?,_ error: Error?) -> Void)) {
        pressReleasesSearchGetWithRequestBuilder(q: q, query: query, sort: sort, from: from, size: size, facets: facets).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search press-releases data in the aggregator. 
     - GET /press-releases/search
     - examples: [{contentType=application/json, example=[ {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
}, {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
} ]}]
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)

     - returns: RequestBuilder<[SearchResult]> 
     */
    open class func pressReleasesSearchGetWithRequestBuilder(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil) -> RequestBuilder<[SearchResult]> {
        let path = "/press-releases/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "query": query, 
                        "sort": sort, 
                        "from": from, 
                        "size": size, 
                        "facets": facets
        ])

        let requestBuilder: RequestBuilder<[SearchResult]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all printed-catalogs sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func printedCatalogsGet(completion: @escaping ((_ data: [PrintedCatalog]?,_ error: Error?) -> Void)) {
        printedCatalogsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all printed-catalogs sorted by last updated date in descending order.
     - GET /printed-catalogs
     - examples: [{contentType=application/json, example=[ {
  "short_description" : { },
  "last_updated" : { },
  "listing_description" : { },
  "is_published" : { },
  "image_url" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "publish_end_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "publish_start_date" : { },
  "api_link" : { },
  "id" : { },
  "copy" : { },
  "last_updated_source" : { },
  "slug" : { },
  "timestamp" : { }
}, {
  "short_description" : { },
  "last_updated" : { },
  "listing_description" : { },
  "is_published" : { },
  "image_url" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "publish_end_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "publish_start_date" : { },
  "api_link" : { },
  "id" : { },
  "copy" : { },
  "last_updated_source" : { },
  "slug" : { },
  "timestamp" : { }
} ]}]

     - returns: RequestBuilder<[PrintedCatalog]> 
     */
    open class func printedCatalogsGetWithRequestBuilder() -> RequestBuilder<[PrintedCatalog]> {
        let path = "/printed-catalogs"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[PrintedCatalog]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single printed-catalog by the given identifier.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func printedCatalogsIdGet(_id: String, completion: @escaping ((_ data: [PrintedCatalog]?,_ error: Error?) -> Void)) {
        printedCatalogsIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single printed-catalog by the given identifier.
     - GET /printed-catalogs/{id}
     - examples: [{contentType=application/json, example=[ {
  "short_description" : { },
  "last_updated" : { },
  "listing_description" : { },
  "is_published" : { },
  "image_url" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "publish_end_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "publish_start_date" : { },
  "api_link" : { },
  "id" : { },
  "copy" : { },
  "last_updated_source" : { },
  "slug" : { },
  "timestamp" : { }
}, {
  "short_description" : { },
  "last_updated" : { },
  "listing_description" : { },
  "is_published" : { },
  "image_url" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "publish_end_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "publish_start_date" : { },
  "api_link" : { },
  "id" : { },
  "copy" : { },
  "last_updated_source" : { },
  "slug" : { },
  "timestamp" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[PrintedCatalog]> 
     */
    open class func printedCatalogsIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[PrintedCatalog]> {
        var path = "/printed-catalogs/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[PrintedCatalog]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search printed-catalogs data in the aggregator. 
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func printedCatalogsSearchGet(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil, completion: @escaping ((_ data: [SearchResult]?,_ error: Error?) -> Void)) {
        printedCatalogsSearchGetWithRequestBuilder(q: q, query: query, sort: sort, from: from, size: size, facets: facets).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search printed-catalogs data in the aggregator. 
     - GET /printed-catalogs/search
     - examples: [{contentType=application/json, example=[ {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
}, {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
} ]}]
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)

     - returns: RequestBuilder<[SearchResult]> 
     */
    open class func printedCatalogsSearchGetWithRequestBuilder(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil) -> RequestBuilder<[SearchResult]> {
        let path = "/printed-catalogs/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "query": query, 
                        "sort": sort, 
                        "from": from, 
                        "size": size, 
                        "facets": facets
        ])

        let requestBuilder: RequestBuilder<[SearchResult]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all selections sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func selectionsGet(completion: @escaping ((_ data: [Selection]?,_ error: Error?) -> Void)) {
        selectionsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all selections sorted by last updated date in descending order.
     - GET /selections
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "published" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "publish_end_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "publish_start_date" : { },
  "short_copy" : { },
  "api_link" : { },
  "id" : { },
  "copy" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "published" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "publish_end_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "publish_start_date" : { },
  "short_copy" : { },
  "api_link" : { },
  "id" : { },
  "copy" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]

     - returns: RequestBuilder<[Selection]> 
     */
    open class func selectionsGetWithRequestBuilder() -> RequestBuilder<[Selection]> {
        let path = "/selections"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Selection]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single selection by the given identifier.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func selectionsIdGet(_id: String, completion: @escaping ((_ data: [Selection]?,_ error: Error?) -> Void)) {
        selectionsIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single selection by the given identifier.
     - GET /selections/{id}
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "published" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "publish_end_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "publish_start_date" : { },
  "short_copy" : { },
  "api_link" : { },
  "id" : { },
  "copy" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "published" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "publish_end_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "publish_start_date" : { },
  "short_copy" : { },
  "api_link" : { },
  "id" : { },
  "copy" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[Selection]> 
     */
    open class func selectionsIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[Selection]> {
        var path = "/selections/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Selection]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search selections data in the aggregator. 
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func selectionsSearchGet(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil, completion: @escaping ((_ data: [SearchResult]?,_ error: Error?) -> Void)) {
        selectionsSearchGetWithRequestBuilder(q: q, query: query, sort: sort, from: from, size: size, facets: facets).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search selections data in the aggregator. 
     - GET /selections/search
     - examples: [{contentType=application/json, example=[ {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
}, {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
} ]}]
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)

     - returns: RequestBuilder<[SearchResult]> 
     */
    open class func selectionsSearchGetWithRequestBuilder(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil) -> RequestBuilder<[SearchResult]> {
        let path = "/selections/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "query": query, 
                        "sort": sort, 
                        "from": from, 
                        "size": size, 
                        "facets": facets
        ])

        let requestBuilder: RequestBuilder<[SearchResult]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all static-pages sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func staticPagesGet(completion: @escaping ((_ data: [StaticPage]?,_ error: Error?) -> Void)) {
        staticPagesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all static-pages sorted by last updated date in descending order.
     - GET /static-pages
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "is_published" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "is_published" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]

     - returns: RequestBuilder<[StaticPage]> 
     */
    open class func staticPagesGetWithRequestBuilder() -> RequestBuilder<[StaticPage]> {
        let path = "/static-pages"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[StaticPage]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single static-page by the given identifier.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func staticPagesIdGet(_id: String, completion: @escaping ((_ data: [StaticPage]?,_ error: Error?) -> Void)) {
        staticPagesIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single static-page by the given identifier.
     - GET /static-pages/{id}
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "is_published" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "is_published" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[StaticPage]> 
     */
    open class func staticPagesIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[StaticPage]> {
        var path = "/static-pages/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[StaticPage]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search static-pages data in the aggregator. 
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func staticPagesSearchGet(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil, completion: @escaping ((_ data: [SearchResult]?,_ error: Error?) -> Void)) {
        staticPagesSearchGetWithRequestBuilder(q: q, query: query, sort: sort, from: from, size: size, facets: facets).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search static-pages data in the aggregator. 
     - GET /static-pages/search
     - examples: [{contentType=application/json, example=[ {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
}, {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
} ]}]
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)

     - returns: RequestBuilder<[SearchResult]> 
     */
    open class func staticPagesSearchGetWithRequestBuilder(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil) -> RequestBuilder<[SearchResult]> {
        let path = "/static-pages/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "query": query, 
                        "sort": sort, 
                        "from": from, 
                        "size": size, 
                        "facets": facets
        ])

        let requestBuilder: RequestBuilder<[SearchResult]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all web-artists sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func webArtistsGet(completion: @escaping ((_ data: [Artist]?,_ error: Error?) -> Void)) {
        webArtistsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all web-artists sorted by last updated date in descending order.
     - GET /web-artists
     - examples: [{contentType=application/json, example=[ {
  "intro_copy" : { },
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "agent_id" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "has_also_known_as" : { },
  "timestamp" : { }
}, {
  "intro_copy" : { },
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "agent_id" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "has_also_known_as" : { },
  "timestamp" : { }
} ]}]

     - returns: RequestBuilder<[Artist]> 
     */
    open class func webArtistsGetWithRequestBuilder() -> RequestBuilder<[Artist]> {
        let path = "/web-artists"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Artist]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single web-artist by the given identifier.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func webArtistsIdGet(_id: String, completion: @escaping ((_ data: [Artist]?,_ error: Error?) -> Void)) {
        webArtistsIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single web-artist by the given identifier.
     - GET /web-artists/{id}
     - examples: [{contentType=application/json, example=[ {
  "intro_copy" : { },
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "agent_id" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "has_also_known_as" : { },
  "timestamp" : { }
}, {
  "intro_copy" : { },
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "agent_id" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "has_also_known_as" : { },
  "timestamp" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[Artist]> 
     */
    open class func webArtistsIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[Artist]> {
        var path = "/web-artists/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Artist]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search web-artists data in the aggregator. 
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func webArtistsSearchGet(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil, completion: @escaping ((_ data: [SearchResult]?,_ error: Error?) -> Void)) {
        webArtistsSearchGetWithRequestBuilder(q: q, query: query, sort: sort, from: from, size: size, facets: facets).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search web-artists data in the aggregator. 
     - GET /web-artists/search
     - examples: [{contentType=application/json, example=[ {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
}, {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
} ]}]
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)

     - returns: RequestBuilder<[SearchResult]> 
     */
    open class func webArtistsSearchGetWithRequestBuilder(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil) -> RequestBuilder<[SearchResult]> {
        let path = "/web-artists/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "query": query, 
                        "sort": sort, 
                        "from": from, 
                        "size": size, 
                        "facets": facets
        ])

        let requestBuilder: RequestBuilder<[SearchResult]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all web-exhibitions sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func webExhibitionsGet(completion: @escaping ((_ data: [Exhibition]?,_ error: Error?) -> Void)) {
        webExhibitionsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all web-exhibitions sorted by last updated date in descending order.
     - GET /web-exhibitions
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "is_published" : { },
  "header_copy" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "exhibition_message" : { },
  "list_description" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "exhibition_id" : { },
  "api_link" : { },
  "id" : { },
  "last_updated_source" : { },
  "is_featured" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "is_published" : { },
  "header_copy" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "exhibition_message" : { },
  "list_description" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "exhibition_id" : { },
  "api_link" : { },
  "id" : { },
  "last_updated_source" : { },
  "is_featured" : { },
  "timestamp" : { }
} ]}]

     - returns: RequestBuilder<[Exhibition]> 
     */
    open class func webExhibitionsGetWithRequestBuilder() -> RequestBuilder<[Exhibition]> {
        let path = "/web-exhibitions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Exhibition]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single web-exhibition by the given identifier.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func webExhibitionsIdGet(_id: String, completion: @escaping ((_ data: [Exhibition]?,_ error: Error?) -> Void)) {
        webExhibitionsIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single web-exhibition by the given identifier.
     - GET /web-exhibitions/{id}
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "is_published" : { },
  "header_copy" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "exhibition_message" : { },
  "list_description" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "exhibition_id" : { },
  "api_link" : { },
  "id" : { },
  "last_updated_source" : { },
  "is_featured" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "is_published" : { },
  "header_copy" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "exhibition_message" : { },
  "list_description" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "exhibition_id" : { },
  "api_link" : { },
  "id" : { },
  "last_updated_source" : { },
  "is_featured" : { },
  "timestamp" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[Exhibition]> 
     */
    open class func webExhibitionsIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[Exhibition]> {
        var path = "/web-exhibitions/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Exhibition]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search web-exhibitions data in the aggregator. 
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func webExhibitionsSearchGet(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil, completion: @escaping ((_ data: [SearchResult]?,_ error: Error?) -> Void)) {
        webExhibitionsSearchGetWithRequestBuilder(q: q, query: query, sort: sort, from: from, size: size, facets: facets).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search web-exhibitions data in the aggregator. 
     - GET /web-exhibitions/search
     - examples: [{contentType=application/json, example=[ {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
}, {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
} ]}]
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)

     - returns: RequestBuilder<[SearchResult]> 
     */
    open class func webExhibitionsSearchGetWithRequestBuilder(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil) -> RequestBuilder<[SearchResult]> {
        let path = "/web-exhibitions/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "query": query, 
                        "sort": sort, 
                        "from": from, 
                        "size": size, 
                        "facets": facets
        ])

        let requestBuilder: RequestBuilder<[SearchResult]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
