//
// CollectionsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class CollectionsAPI {
    /**
     A list of all agent-roles sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func agentRolesGet(completion: @escaping ((_ data: [AgentRole]?,_ error: Error?) -> Void)) {
        agentRolesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all agent-roles sorted by last updated date in descending order.
     - GET /agent-roles
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]

     - returns: RequestBuilder<[AgentRole]> 
     */
    open class func agentRolesGetWithRequestBuilder() -> RequestBuilder<[AgentRole]> {
        let path = "/agent-roles"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[AgentRole]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single agent-role by the given identifier. {id} is the identifier from our collections management system.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func agentRolesIdGet(_id: String, completion: @escaping ((_ data: [AgentRole]?,_ error: Error?) -> Void)) {
        agentRolesIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single agent-role by the given identifier. {id} is the identifier from our collections management system.
     - GET /agent-roles/{id}
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[AgentRole]> 
     */
    open class func agentRolesIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[AgentRole]> {
        var path = "/agent-roles/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[AgentRole]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all agent-types sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func agentTypesGet(completion: @escaping ((_ data: [AgentType]?,_ error: Error?) -> Void)) {
        agentTypesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all agent-types sorted by last updated date in descending order.
     - GET /agent-types
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]

     - returns: RequestBuilder<[AgentType]> 
     */
    open class func agentTypesGetWithRequestBuilder() -> RequestBuilder<[AgentType]> {
        let path = "/agent-types"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[AgentType]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single agent-type by the given identifier. {id} is the identifier from our collections management system.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func agentTypesIdGet(_id: String, completion: @escaping ((_ data: [AgentType]?,_ error: Error?) -> Void)) {
        agentTypesIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single agent-type by the given identifier. {id} is the identifier from our collections management system.
     - GET /agent-types/{id}
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[AgentType]> 
     */
    open class func agentTypesIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[AgentType]> {
        var path = "/agent-types/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[AgentType]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all agents sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func agentsGet(completion: @escaping ((_ data: [Agent]?,_ error: Error?) -> Void)) {
        agentsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all agents sorted by last updated date in descending order.
     - GET /agents
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "site_ids" : { },
  "sort_title" : { },
  "agent_type_id" : { },
  "birth_date" : { },
  "birth_place" : { },
  "description" : { },
  "alt_titles" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "agent_type_title" : { },
  "death_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "is_artist" : { },
  "api_link" : { },
  "ulan_uri" : { },
  "artwork_ids" : { },
  "id" : { },
  "death_place" : { },
  "last_updated_source" : { },
  "is_licensing_restricted" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "site_ids" : { },
  "sort_title" : { },
  "agent_type_id" : { },
  "birth_date" : { },
  "birth_place" : { },
  "description" : { },
  "alt_titles" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "agent_type_title" : { },
  "death_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "is_artist" : { },
  "api_link" : { },
  "ulan_uri" : { },
  "artwork_ids" : { },
  "id" : { },
  "death_place" : { },
  "last_updated_source" : { },
  "is_licensing_restricted" : { },
  "timestamp" : { }
} ]}]

     - returns: RequestBuilder<[Agent]> 
     */
    open class func agentsGetWithRequestBuilder() -> RequestBuilder<[Agent]> {
        let path = "/agents"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Agent]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single agent by the given identifier. {id} is the identifier from our collections management system.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func agentsIdGet(_id: String, completion: @escaping ((_ data: [Agent]?,_ error: Error?) -> Void)) {
        agentsIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single agent by the given identifier. {id} is the identifier from our collections management system.
     - GET /agents/{id}
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "site_ids" : { },
  "sort_title" : { },
  "agent_type_id" : { },
  "birth_date" : { },
  "birth_place" : { },
  "description" : { },
  "alt_titles" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "agent_type_title" : { },
  "death_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "is_artist" : { },
  "api_link" : { },
  "ulan_uri" : { },
  "artwork_ids" : { },
  "id" : { },
  "death_place" : { },
  "last_updated_source" : { },
  "is_licensing_restricted" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "site_ids" : { },
  "sort_title" : { },
  "agent_type_id" : { },
  "birth_date" : { },
  "birth_place" : { },
  "description" : { },
  "alt_titles" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "agent_type_title" : { },
  "death_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "is_artist" : { },
  "api_link" : { },
  "ulan_uri" : { },
  "artwork_ids" : { },
  "id" : { },
  "death_place" : { },
  "last_updated_source" : { },
  "is_licensing_restricted" : { },
  "timestamp" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[Agent]> 
     */
    open class func agentsIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[Agent]> {
        var path = "/agents/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Agent]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search agents data in the aggregator. 
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func agentsSearchGet(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil, completion: @escaping ((_ data: [SearchResult]?,_ error: Error?) -> Void)) {
        agentsSearchGetWithRequestBuilder(q: q, query: query, sort: sort, from: from, size: size, facets: facets).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search agents data in the aggregator. 
     - GET /agents/search
     - examples: [{contentType=application/json, example=[ {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
}, {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
} ]}]
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)

     - returns: RequestBuilder<[SearchResult]> 
     */
    open class func agentsSearchGetWithRequestBuilder(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil) -> RequestBuilder<[SearchResult]> {
        let path = "/agents/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "query": query, 
                        "sort": sort, 
                        "from": from, 
                        "size": size, 
                        "facets": facets
        ])

        let requestBuilder: RequestBuilder<[SearchResult]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all artists sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func artistsGet(completion: @escaping ((_ data: [Agent]?,_ error: Error?) -> Void)) {
        artistsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all artists sorted by last updated date in descending order.
     - GET /artists
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "site_ids" : { },
  "sort_title" : { },
  "agent_type_id" : { },
  "birth_date" : { },
  "birth_place" : { },
  "description" : { },
  "alt_titles" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "agent_type_title" : { },
  "death_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "is_artist" : { },
  "api_link" : { },
  "ulan_uri" : { },
  "artwork_ids" : { },
  "id" : { },
  "death_place" : { },
  "last_updated_source" : { },
  "is_licensing_restricted" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "site_ids" : { },
  "sort_title" : { },
  "agent_type_id" : { },
  "birth_date" : { },
  "birth_place" : { },
  "description" : { },
  "alt_titles" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "agent_type_title" : { },
  "death_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "is_artist" : { },
  "api_link" : { },
  "ulan_uri" : { },
  "artwork_ids" : { },
  "id" : { },
  "death_place" : { },
  "last_updated_source" : { },
  "is_licensing_restricted" : { },
  "timestamp" : { }
} ]}]

     - returns: RequestBuilder<[Agent]> 
     */
    open class func artistsGetWithRequestBuilder() -> RequestBuilder<[Agent]> {
        let path = "/artists"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Agent]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single artist by the given identifier. {id} is the identifier from our collections management system.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func artistsIdGet(_id: String, completion: @escaping ((_ data: [Agent]?,_ error: Error?) -> Void)) {
        artistsIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single artist by the given identifier. {id} is the identifier from our collections management system.
     - GET /artists/{id}
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "site_ids" : { },
  "sort_title" : { },
  "agent_type_id" : { },
  "birth_date" : { },
  "birth_place" : { },
  "description" : { },
  "alt_titles" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "agent_type_title" : { },
  "death_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "is_artist" : { },
  "api_link" : { },
  "ulan_uri" : { },
  "artwork_ids" : { },
  "id" : { },
  "death_place" : { },
  "last_updated_source" : { },
  "is_licensing_restricted" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "site_ids" : { },
  "sort_title" : { },
  "agent_type_id" : { },
  "birth_date" : { },
  "birth_place" : { },
  "description" : { },
  "alt_titles" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "agent_type_title" : { },
  "death_date" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "is_artist" : { },
  "api_link" : { },
  "ulan_uri" : { },
  "artwork_ids" : { },
  "id" : { },
  "death_place" : { },
  "last_updated_source" : { },
  "is_licensing_restricted" : { },
  "timestamp" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[Agent]> 
     */
    open class func artistsIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[Agent]> {
        var path = "/artists/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Agent]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all artwork-date-qualifiers sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func artworkDateQualifiersGet(completion: @escaping ((_ data: [ArtworkDateQualifier]?,_ error: Error?) -> Void)) {
        artworkDateQualifiersGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all artwork-date-qualifiers sorted by last updated date in descending order.
     - GET /artwork-date-qualifiers
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]

     - returns: RequestBuilder<[ArtworkDateQualifier]> 
     */
    open class func artworkDateQualifiersGetWithRequestBuilder() -> RequestBuilder<[ArtworkDateQualifier]> {
        let path = "/artwork-date-qualifiers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ArtworkDateQualifier]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single artwork-date-qualifier by the given identifier. {id} is the identifier from our collections management system.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func artworkDateQualifiersIdGet(_id: String, completion: @escaping ((_ data: [ArtworkDateQualifier]?,_ error: Error?) -> Void)) {
        artworkDateQualifiersIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single artwork-date-qualifier by the given identifier. {id} is the identifier from our collections management system.
     - GET /artwork-date-qualifiers/{id}
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[ArtworkDateQualifier]> 
     */
    open class func artworkDateQualifiersIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[ArtworkDateQualifier]> {
        var path = "/artwork-date-qualifiers/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ArtworkDateQualifier]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all artwork-place-qualifiers sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func artworkPlaceQualifiersGet(completion: @escaping ((_ data: [ArtworkPlaceQualifier]?,_ error: Error?) -> Void)) {
        artworkPlaceQualifiersGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all artwork-place-qualifiers sorted by last updated date in descending order.
     - GET /artwork-place-qualifiers
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]

     - returns: RequestBuilder<[ArtworkPlaceQualifier]> 
     */
    open class func artworkPlaceQualifiersGetWithRequestBuilder() -> RequestBuilder<[ArtworkPlaceQualifier]> {
        let path = "/artwork-place-qualifiers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ArtworkPlaceQualifier]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single artwork-place-qualifier by the given identifier. {id} is the identifier from our collections management system.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func artworkPlaceQualifiersIdGet(_id: String, completion: @escaping ((_ data: [ArtworkPlaceQualifier]?,_ error: Error?) -> Void)) {
        artworkPlaceQualifiersIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single artwork-place-qualifier by the given identifier. {id} is the identifier from our collections management system.
     - GET /artwork-place-qualifiers/{id}
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[ArtworkPlaceQualifier]> 
     */
    open class func artworkPlaceQualifiersIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[ArtworkPlaceQualifier]> {
        var path = "/artwork-place-qualifiers/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ArtworkPlaceQualifier]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all artwork-types sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func artworkTypesGet(completion: @escaping ((_ data: [ArtworkType]?,_ error: Error?) -> Void)) {
        artworkTypesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all artwork-types sorted by last updated date in descending order.
     - GET /artwork-types
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]

     - returns: RequestBuilder<[ArtworkType]> 
     */
    open class func artworkTypesGetWithRequestBuilder() -> RequestBuilder<[ArtworkType]> {
        let path = "/artwork-types"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ArtworkType]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single artwork-type by the given identifier. {id} is the identifier from our collections management system.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func artworkTypesIdGet(_id: String, completion: @escaping ((_ data: [ArtworkType]?,_ error: Error?) -> Void)) {
        artworkTypesIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single artwork-type by the given identifier. {id} is the identifier from our collections management system.
     - GET /artwork-types/{id}
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[ArtworkType]> 
     */
    open class func artworkTypesIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[ArtworkType]> {
        var path = "/artwork-types/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ArtworkType]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all artworks sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func artworksGet(completion: @escaping ((_ data: [Artwork]?,_ error: Error?) -> Void)) {
        artworksGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all artworks sorted by last updated date in descending order.
     - GET /artworks
     - examples: [{contentType=application/json, example=[ {
  "category_titles" : { },
  "classification_titles" : { },
  "subject_titles" : { },
  "site_ids" : { },
  "suggest_autocomplete_all" : { },
  "alt_style_ids" : { },
  "video_ids" : { },
  "publication_history" : { },
  "alt_technique_ids" : { },
  "classification_ids" : { },
  "credit_line" : { },
  "copyright_notice" : { },
  "latlon" : { },
  "text_ids" : { },
  "fiscal_year" : { },
  "section_ids" : { },
  "is_on_view" : { },
  "alt_image_ids" : { },
  "term_titles" : { },
  "classification_id" : { },
  "id" : { },
  "category_ids" : { },
  "last_updated_source" : { },
  "main_reference_number" : { },
  "material_titles" : { },
  "classification_title" : { },
  "longitude" : { },
  "alt_subject_ids" : { },
  "internal_department_id" : { },
  "document_ids" : { },
  "section_titles" : { },
  "thumbnail" : { },
  "last_updated" : { },
  "alt_classification_ids" : { },
  "is_boosted" : { },
  "alt_artist_ids" : { },
  "artist_display" : { },
  "alt_material_ids" : { },
  "date_end" : { },
  "style_title" : { },
  "artist_id" : { },
  "date_start" : { },
  "suggest_autocomplete_boosted" : { },
  "artist_titles" : { },
  "style_ids" : { },
  "subject_ids" : { },
  "publishing_verification_level" : { },
  "date_display" : { },
  "has_multimedia_resources" : { },
  "image_id" : { },
  "fiscal_year_deaccession" : { },
  "subject_id" : { },
  "is_public_domain" : { },
  "medium_display" : { },
  "colorfulness" : { },
  "color" : { },
  "latitude" : { },
  "is_zoomable" : { },
  "description" : { },
  "artist_title" : { },
  "exhibition_history" : { },
  "provenance_text" : { },
  "material_ids" : { },
  "technique_ids" : { },
  "title" : { },
  "place_of_origin" : { },
  "artist_ids" : { },
  "collection_status" : { },
  "pageviews" : { },
  "style_titles" : { },
  "department_title" : { },
  "has_not_been_viewed_much" : { },
  "api_link" : { },
  "technique_titles" : { },
  "gallery_id" : { },
  "timestamp" : { },
  "pageviews_recent" : { },
  "department_id" : { },
  "inscriptions" : { },
  "has_educational_resources" : { },
  "alt_titles" : { },
  "theme_titles" : { },
  "gallery_title" : { },
  "boost_rank" : { },
  "artwork_type_title" : { },
  "api_model" : { },
  "sound_ids" : { },
  "max_zoom_window_size" : { },
  "artwork_catalogue_ids" : { },
  "material_id" : { },
  "technique_id" : { },
  "style_id" : { },
  "artwork_type_id" : { },
  "dimensions" : { }
}, {
  "category_titles" : { },
  "classification_titles" : { },
  "subject_titles" : { },
  "site_ids" : { },
  "suggest_autocomplete_all" : { },
  "alt_style_ids" : { },
  "video_ids" : { },
  "publication_history" : { },
  "alt_technique_ids" : { },
  "classification_ids" : { },
  "credit_line" : { },
  "copyright_notice" : { },
  "latlon" : { },
  "text_ids" : { },
  "fiscal_year" : { },
  "section_ids" : { },
  "is_on_view" : { },
  "alt_image_ids" : { },
  "term_titles" : { },
  "classification_id" : { },
  "id" : { },
  "category_ids" : { },
  "last_updated_source" : { },
  "main_reference_number" : { },
  "material_titles" : { },
  "classification_title" : { },
  "longitude" : { },
  "alt_subject_ids" : { },
  "internal_department_id" : { },
  "document_ids" : { },
  "section_titles" : { },
  "thumbnail" : { },
  "last_updated" : { },
  "alt_classification_ids" : { },
  "is_boosted" : { },
  "alt_artist_ids" : { },
  "artist_display" : { },
  "alt_material_ids" : { },
  "date_end" : { },
  "style_title" : { },
  "artist_id" : { },
  "date_start" : { },
  "suggest_autocomplete_boosted" : { },
  "artist_titles" : { },
  "style_ids" : { },
  "subject_ids" : { },
  "publishing_verification_level" : { },
  "date_display" : { },
  "has_multimedia_resources" : { },
  "image_id" : { },
  "fiscal_year_deaccession" : { },
  "subject_id" : { },
  "is_public_domain" : { },
  "medium_display" : { },
  "colorfulness" : { },
  "color" : { },
  "latitude" : { },
  "is_zoomable" : { },
  "description" : { },
  "artist_title" : { },
  "exhibition_history" : { },
  "provenance_text" : { },
  "material_ids" : { },
  "technique_ids" : { },
  "title" : { },
  "place_of_origin" : { },
  "artist_ids" : { },
  "collection_status" : { },
  "pageviews" : { },
  "style_titles" : { },
  "department_title" : { },
  "has_not_been_viewed_much" : { },
  "api_link" : { },
  "technique_titles" : { },
  "gallery_id" : { },
  "timestamp" : { },
  "pageviews_recent" : { },
  "department_id" : { },
  "inscriptions" : { },
  "has_educational_resources" : { },
  "alt_titles" : { },
  "theme_titles" : { },
  "gallery_title" : { },
  "boost_rank" : { },
  "artwork_type_title" : { },
  "api_model" : { },
  "sound_ids" : { },
  "max_zoom_window_size" : { },
  "artwork_catalogue_ids" : { },
  "material_id" : { },
  "technique_id" : { },
  "style_id" : { },
  "artwork_type_id" : { },
  "dimensions" : { }
} ]}]

     - returns: RequestBuilder<[Artwork]> 
     */
    open class func artworksGetWithRequestBuilder() -> RequestBuilder<[Artwork]> {
        let path = "/artworks"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Artwork]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single artwork by the given identifier. {id} is the identifier from our collections management system.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func artworksIdGet(_id: String, completion: @escaping ((_ data: [Artwork]?,_ error: Error?) -> Void)) {
        artworksIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single artwork by the given identifier. {id} is the identifier from our collections management system.
     - GET /artworks/{id}
     - examples: [{contentType=application/json, example=[ {
  "category_titles" : { },
  "classification_titles" : { },
  "subject_titles" : { },
  "site_ids" : { },
  "suggest_autocomplete_all" : { },
  "alt_style_ids" : { },
  "video_ids" : { },
  "publication_history" : { },
  "alt_technique_ids" : { },
  "classification_ids" : { },
  "credit_line" : { },
  "copyright_notice" : { },
  "latlon" : { },
  "text_ids" : { },
  "fiscal_year" : { },
  "section_ids" : { },
  "is_on_view" : { },
  "alt_image_ids" : { },
  "term_titles" : { },
  "classification_id" : { },
  "id" : { },
  "category_ids" : { },
  "last_updated_source" : { },
  "main_reference_number" : { },
  "material_titles" : { },
  "classification_title" : { },
  "longitude" : { },
  "alt_subject_ids" : { },
  "internal_department_id" : { },
  "document_ids" : { },
  "section_titles" : { },
  "thumbnail" : { },
  "last_updated" : { },
  "alt_classification_ids" : { },
  "is_boosted" : { },
  "alt_artist_ids" : { },
  "artist_display" : { },
  "alt_material_ids" : { },
  "date_end" : { },
  "style_title" : { },
  "artist_id" : { },
  "date_start" : { },
  "suggest_autocomplete_boosted" : { },
  "artist_titles" : { },
  "style_ids" : { },
  "subject_ids" : { },
  "publishing_verification_level" : { },
  "date_display" : { },
  "has_multimedia_resources" : { },
  "image_id" : { },
  "fiscal_year_deaccession" : { },
  "subject_id" : { },
  "is_public_domain" : { },
  "medium_display" : { },
  "colorfulness" : { },
  "color" : { },
  "latitude" : { },
  "is_zoomable" : { },
  "description" : { },
  "artist_title" : { },
  "exhibition_history" : { },
  "provenance_text" : { },
  "material_ids" : { },
  "technique_ids" : { },
  "title" : { },
  "place_of_origin" : { },
  "artist_ids" : { },
  "collection_status" : { },
  "pageviews" : { },
  "style_titles" : { },
  "department_title" : { },
  "has_not_been_viewed_much" : { },
  "api_link" : { },
  "technique_titles" : { },
  "gallery_id" : { },
  "timestamp" : { },
  "pageviews_recent" : { },
  "department_id" : { },
  "inscriptions" : { },
  "has_educational_resources" : { },
  "alt_titles" : { },
  "theme_titles" : { },
  "gallery_title" : { },
  "boost_rank" : { },
  "artwork_type_title" : { },
  "api_model" : { },
  "sound_ids" : { },
  "max_zoom_window_size" : { },
  "artwork_catalogue_ids" : { },
  "material_id" : { },
  "technique_id" : { },
  "style_id" : { },
  "artwork_type_id" : { },
  "dimensions" : { }
}, {
  "category_titles" : { },
  "classification_titles" : { },
  "subject_titles" : { },
  "site_ids" : { },
  "suggest_autocomplete_all" : { },
  "alt_style_ids" : { },
  "video_ids" : { },
  "publication_history" : { },
  "alt_technique_ids" : { },
  "classification_ids" : { },
  "credit_line" : { },
  "copyright_notice" : { },
  "latlon" : { },
  "text_ids" : { },
  "fiscal_year" : { },
  "section_ids" : { },
  "is_on_view" : { },
  "alt_image_ids" : { },
  "term_titles" : { },
  "classification_id" : { },
  "id" : { },
  "category_ids" : { },
  "last_updated_source" : { },
  "main_reference_number" : { },
  "material_titles" : { },
  "classification_title" : { },
  "longitude" : { },
  "alt_subject_ids" : { },
  "internal_department_id" : { },
  "document_ids" : { },
  "section_titles" : { },
  "thumbnail" : { },
  "last_updated" : { },
  "alt_classification_ids" : { },
  "is_boosted" : { },
  "alt_artist_ids" : { },
  "artist_display" : { },
  "alt_material_ids" : { },
  "date_end" : { },
  "style_title" : { },
  "artist_id" : { },
  "date_start" : { },
  "suggest_autocomplete_boosted" : { },
  "artist_titles" : { },
  "style_ids" : { },
  "subject_ids" : { },
  "publishing_verification_level" : { },
  "date_display" : { },
  "has_multimedia_resources" : { },
  "image_id" : { },
  "fiscal_year_deaccession" : { },
  "subject_id" : { },
  "is_public_domain" : { },
  "medium_display" : { },
  "colorfulness" : { },
  "color" : { },
  "latitude" : { },
  "is_zoomable" : { },
  "description" : { },
  "artist_title" : { },
  "exhibition_history" : { },
  "provenance_text" : { },
  "material_ids" : { },
  "technique_ids" : { },
  "title" : { },
  "place_of_origin" : { },
  "artist_ids" : { },
  "collection_status" : { },
  "pageviews" : { },
  "style_titles" : { },
  "department_title" : { },
  "has_not_been_viewed_much" : { },
  "api_link" : { },
  "technique_titles" : { },
  "gallery_id" : { },
  "timestamp" : { },
  "pageviews_recent" : { },
  "department_id" : { },
  "inscriptions" : { },
  "has_educational_resources" : { },
  "alt_titles" : { },
  "theme_titles" : { },
  "gallery_title" : { },
  "boost_rank" : { },
  "artwork_type_title" : { },
  "api_model" : { },
  "sound_ids" : { },
  "max_zoom_window_size" : { },
  "artwork_catalogue_ids" : { },
  "material_id" : { },
  "technique_id" : { },
  "style_id" : { },
  "artwork_type_id" : { },
  "dimensions" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[Artwork]> 
     */
    open class func artworksIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[Artwork]> {
        var path = "/artworks/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Artwork]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search artworks data in the aggregator. Artworks in the groups of essentials are boosted so they'll show up higher in results.
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func artworksSearchGet(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil, completion: @escaping ((_ data: [SearchResult]?,_ error: Error?) -> Void)) {
        artworksSearchGetWithRequestBuilder(q: q, query: query, sort: sort, from: from, size: size, facets: facets).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search artworks data in the aggregator. Artworks in the groups of essentials are boosted so they'll show up higher in results.
     - GET /artworks/search
     - examples: [{contentType=application/json, example=[ {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
}, {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
} ]}]
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)

     - returns: RequestBuilder<[SearchResult]> 
     */
    open class func artworksSearchGetWithRequestBuilder(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil) -> RequestBuilder<[SearchResult]> {
        let path = "/artworks/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "query": query, 
                        "sort": sort, 
                        "from": from, 
                        "size": size, 
                        "facets": facets
        ])

        let requestBuilder: RequestBuilder<[SearchResult]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all assets sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func assetsGet(completion: @escaping ((_ data: [Asset]?,_ error: Error?) -> Void)) {
        assetsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all assets sorted by last updated date in descending order.
     - GET /assets
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "is_multimedia_resource" : { },
  "lake_guid" : { },
  "description" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "content" : { },
  "content_e_tag" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "copyright_notice" : { },
  "alt_text" : { },
  "api_link" : { },
  "artwork_titles" : { },
  "content_modified_at" : { },
  "artwork_ids" : { },
  "id" : { },
  "is_educational_resource" : { },
  "last_updated_source" : { },
  "is_teacher_resource" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "is_multimedia_resource" : { },
  "lake_guid" : { },
  "description" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "content" : { },
  "content_e_tag" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "copyright_notice" : { },
  "alt_text" : { },
  "api_link" : { },
  "artwork_titles" : { },
  "content_modified_at" : { },
  "artwork_ids" : { },
  "id" : { },
  "is_educational_resource" : { },
  "last_updated_source" : { },
  "is_teacher_resource" : { },
  "timestamp" : { }
} ]}]

     - returns: RequestBuilder<[Asset]> 
     */
    open class func assetsGetWithRequestBuilder() -> RequestBuilder<[Asset]> {
        let path = "/assets"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Asset]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single asset by the given identifier. {id} is the identifier from our collections management system.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func assetsIdGet(_id: String, completion: @escaping ((_ data: [Asset]?,_ error: Error?) -> Void)) {
        assetsIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single asset by the given identifier. {id} is the identifier from our collections management system.
     - GET /assets/{id}
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "is_multimedia_resource" : { },
  "lake_guid" : { },
  "description" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "content" : { },
  "content_e_tag" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "copyright_notice" : { },
  "alt_text" : { },
  "api_link" : { },
  "artwork_titles" : { },
  "content_modified_at" : { },
  "artwork_ids" : { },
  "id" : { },
  "is_educational_resource" : { },
  "last_updated_source" : { },
  "is_teacher_resource" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "is_multimedia_resource" : { },
  "lake_guid" : { },
  "description" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "content" : { },
  "content_e_tag" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "copyright_notice" : { },
  "alt_text" : { },
  "api_link" : { },
  "artwork_titles" : { },
  "content_modified_at" : { },
  "artwork_ids" : { },
  "id" : { },
  "is_educational_resource" : { },
  "last_updated_source" : { },
  "is_teacher_resource" : { },
  "timestamp" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[Asset]> 
     */
    open class func assetsIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[Asset]> {
        var path = "/assets/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Asset]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all catalogues sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cataloguesGet(completion: @escaping ((_ data: [Catalogue]?,_ error: Error?) -> Void)) {
        cataloguesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all catalogues sorted by last updated date in descending order.
     - GET /catalogues
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]

     - returns: RequestBuilder<[Catalogue]> 
     */
    open class func cataloguesGetWithRequestBuilder() -> RequestBuilder<[Catalogue]> {
        let path = "/catalogues"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Catalogue]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single catalogue by the given identifier. {id} is the identifier from our collections management system.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cataloguesIdGet(_id: String, completion: @escaping ((_ data: [Catalogue]?,_ error: Error?) -> Void)) {
        cataloguesIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single catalogue by the given identifier. {id} is the identifier from our collections management system.
     - GET /catalogues/{id}
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[Catalogue]> 
     */
    open class func cataloguesIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[Catalogue]> {
        var path = "/catalogues/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Catalogue]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all category-terms sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func categoryTermsGet(completion: @escaping ((_ data: [Category]?,_ error: Error?) -> Void)) {
        categoryTermsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all category-terms sorted by last updated date in descending order.
     - GET /category-terms
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "child_ids" : { },
  "child_titles" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "parent_id" : { },
  "api_link" : { },
  "id" : { },
  "parent_title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "child_ids" : { },
  "child_titles" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "parent_id" : { },
  "api_link" : { },
  "id" : { },
  "parent_title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]

     - returns: RequestBuilder<[Category]> 
     */
    open class func categoryTermsGetWithRequestBuilder() -> RequestBuilder<[Category]> {
        let path = "/category-terms"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Category]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single category-term by the given identifier. {id} is the identifier from our collections management system.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func categoryTermsIdGet(_id: String, completion: @escaping ((_ data: [Category]?,_ error: Error?) -> Void)) {
        categoryTermsIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single category-term by the given identifier. {id} is the identifier from our collections management system.
     - GET /category-terms/{id}
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "child_ids" : { },
  "child_titles" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "parent_id" : { },
  "api_link" : { },
  "id" : { },
  "parent_title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "child_ids" : { },
  "child_titles" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "parent_id" : { },
  "api_link" : { },
  "id" : { },
  "parent_title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[Category]> 
     */
    open class func categoryTermsIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[Category]> {
        var path = "/category-terms/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Category]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search category-terms data in the aggregator. 
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func categoryTermsSearchGet(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil, completion: @escaping ((_ data: [SearchResult]?,_ error: Error?) -> Void)) {
        categoryTermsSearchGetWithRequestBuilder(q: q, query: query, sort: sort, from: from, size: size, facets: facets).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search category-terms data in the aggregator. 
     - GET /category-terms/search
     - examples: [{contentType=application/json, example=[ {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
}, {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
} ]}]
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)

     - returns: RequestBuilder<[SearchResult]> 
     */
    open class func categoryTermsSearchGetWithRequestBuilder(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil) -> RequestBuilder<[SearchResult]> {
        let path = "/category-terms/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "query": query, 
                        "sort": sort, 
                        "from": from, 
                        "size": size, 
                        "facets": facets
        ])

        let requestBuilder: RequestBuilder<[SearchResult]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all departments sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func departmentsGet(completion: @escaping ((_ data: [Category]?,_ error: Error?) -> Void)) {
        departmentsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all departments sorted by last updated date in descending order.
     - GET /departments
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "child_ids" : { },
  "child_titles" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "parent_id" : { },
  "api_link" : { },
  "id" : { },
  "parent_title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "child_ids" : { },
  "child_titles" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "parent_id" : { },
  "api_link" : { },
  "id" : { },
  "parent_title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]

     - returns: RequestBuilder<[Category]> 
     */
    open class func departmentsGetWithRequestBuilder() -> RequestBuilder<[Category]> {
        let path = "/departments"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Category]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single department by the given identifier. {id} is the identifier from our collections management system.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func departmentsIdGet(_id: String, completion: @escaping ((_ data: [Category]?,_ error: Error?) -> Void)) {
        departmentsIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single department by the given identifier. {id} is the identifier from our collections management system.
     - GET /departments/{id}
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "child_ids" : { },
  "child_titles" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "parent_id" : { },
  "api_link" : { },
  "id" : { },
  "parent_title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "child_ids" : { },
  "child_titles" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "parent_id" : { },
  "api_link" : { },
  "id" : { },
  "parent_title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[Category]> 
     */
    open class func departmentsIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[Category]> {
        var path = "/departments/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Category]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all exhibitions sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func exhibitionsGet(completion: @escaping ((_ data: [Exhibition]?,_ error: Error?) -> Void)) {
        exhibitionsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all exhibitions sorted by last updated date in descending order.
     - GET /exhibitions
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "is_published" : { },
  "header_copy" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "exhibition_message" : { },
  "list_description" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "exhibition_id" : { },
  "api_link" : { },
  "id" : { },
  "last_updated_source" : { },
  "is_featured" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "is_published" : { },
  "header_copy" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "exhibition_message" : { },
  "list_description" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "exhibition_id" : { },
  "api_link" : { },
  "id" : { },
  "last_updated_source" : { },
  "is_featured" : { },
  "timestamp" : { }
} ]}]

     - returns: RequestBuilder<[Exhibition]> 
     */
    open class func exhibitionsGetWithRequestBuilder() -> RequestBuilder<[Exhibition]> {
        let path = "/exhibitions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Exhibition]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single exhibition by the given identifier. {id} is the identifier from our collections management system.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func exhibitionsIdGet(_id: String, completion: @escaping ((_ data: [Exhibition]?,_ error: Error?) -> Void)) {
        exhibitionsIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single exhibition by the given identifier. {id} is the identifier from our collections management system.
     - GET /exhibitions/{id}
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "is_published" : { },
  "header_copy" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "exhibition_message" : { },
  "list_description" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "exhibition_id" : { },
  "api_link" : { },
  "id" : { },
  "last_updated_source" : { },
  "is_featured" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "is_published" : { },
  "header_copy" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "exhibition_message" : { },
  "list_description" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "exhibition_id" : { },
  "api_link" : { },
  "id" : { },
  "last_updated_source" : { },
  "is_featured" : { },
  "timestamp" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[Exhibition]> 
     */
    open class func exhibitionsIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[Exhibition]> {
        var path = "/exhibitions/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Exhibition]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search exhibitions data in the aggregator. 
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func exhibitionsSearchGet(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil, completion: @escaping ((_ data: [SearchResult]?,_ error: Error?) -> Void)) {
        exhibitionsSearchGetWithRequestBuilder(q: q, query: query, sort: sort, from: from, size: size, facets: facets).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search exhibitions data in the aggregator. 
     - GET /exhibitions/search
     - examples: [{contentType=application/json, example=[ {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
}, {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
} ]}]
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)

     - returns: RequestBuilder<[SearchResult]> 
     */
    open class func exhibitionsSearchGetWithRequestBuilder(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil) -> RequestBuilder<[SearchResult]> {
        let path = "/exhibitions/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "query": query, 
                        "sort": sort, 
                        "from": from, 
                        "size": size, 
                        "facets": facets
        ])

        let requestBuilder: RequestBuilder<[SearchResult]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all galleries sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func galleriesGet(completion: @escaping ((_ data: [Gallery]?,_ error: Error?) -> Void)) {
        galleriesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all galleries sorted by last updated date in descending order.
     - GET /galleries
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "latitude" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "number" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "latlon" : { },
  "api_link" : { },
  "id" : { },
  "floor" : { },
  "last_updated_source" : { },
  "is_closed" : { },
  "longitude" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "latitude" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "number" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "latlon" : { },
  "api_link" : { },
  "id" : { },
  "floor" : { },
  "last_updated_source" : { },
  "is_closed" : { },
  "longitude" : { },
  "timestamp" : { }
} ]}]

     - returns: RequestBuilder<[Gallery]> 
     */
    open class func galleriesGetWithRequestBuilder() -> RequestBuilder<[Gallery]> {
        let path = "/galleries"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Gallery]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single gallery by the given identifier. {id} is the identifier from our collections management system.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func galleriesIdGet(_id: String, completion: @escaping ((_ data: [Gallery]?,_ error: Error?) -> Void)) {
        galleriesIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single gallery by the given identifier. {id} is the identifier from our collections management system.
     - GET /galleries/{id}
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "latitude" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "number" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "latlon" : { },
  "api_link" : { },
  "id" : { },
  "floor" : { },
  "last_updated_source" : { },
  "is_closed" : { },
  "longitude" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "latitude" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "number" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "latlon" : { },
  "api_link" : { },
  "id" : { },
  "floor" : { },
  "last_updated_source" : { },
  "is_closed" : { },
  "longitude" : { },
  "timestamp" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[Gallery]> 
     */
    open class func galleriesIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[Gallery]> {
        var path = "/galleries/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Gallery]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search galleries data in the aggregator. 
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func galleriesSearchGet(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil, completion: @escaping ((_ data: [SearchResult]?,_ error: Error?) -> Void)) {
        galleriesSearchGetWithRequestBuilder(q: q, query: query, sort: sort, from: from, size: size, facets: facets).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search galleries data in the aggregator. 
     - GET /galleries/search
     - examples: [{contentType=application/json, example=[ {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
}, {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
} ]}]
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)

     - returns: RequestBuilder<[SearchResult]> 
     */
    open class func galleriesSearchGetWithRequestBuilder(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil) -> RequestBuilder<[SearchResult]> {
        let path = "/galleries/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "query": query, 
                        "sort": sort, 
                        "from": from, 
                        "size": size, 
                        "facets": facets
        ])

        let requestBuilder: RequestBuilder<[SearchResult]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all images sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func imagesGet(completion: @escaping ((_ data: [Image]?,_ error: Error?) -> Void)) {
        imagesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all images sorted by last updated date in descending order.
     - GET /images
     - examples: [{contentType=application/json, example=[ {
  "colorfulness" : { },
  "color" : { },
  "lake_guid" : { },
  "description" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "content" : { },
  "content_e_tag" : { },
  "copyright_notice" : { },
  "alt_text" : { },
  "fingerprint" : { },
  "api_link" : { },
  "artwork_ids" : { },
  "id" : { },
  "is_educational_resource" : { },
  "last_updated_source" : { },
  "lqip" : { },
  "height" : { },
  "timestamp" : { },
  "last_updated" : { },
  "is_multimedia_resource" : { },
  "iiif_url" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "width" : { },
  "artwork_titles" : { },
  "content_modified_at" : { },
  "is_teacher_resource" : { }
}, {
  "colorfulness" : { },
  "color" : { },
  "lake_guid" : { },
  "description" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "content" : { },
  "content_e_tag" : { },
  "copyright_notice" : { },
  "alt_text" : { },
  "fingerprint" : { },
  "api_link" : { },
  "artwork_ids" : { },
  "id" : { },
  "is_educational_resource" : { },
  "last_updated_source" : { },
  "lqip" : { },
  "height" : { },
  "timestamp" : { },
  "last_updated" : { },
  "is_multimedia_resource" : { },
  "iiif_url" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "width" : { },
  "artwork_titles" : { },
  "content_modified_at" : { },
  "is_teacher_resource" : { }
} ]}]

     - returns: RequestBuilder<[Image]> 
     */
    open class func imagesGetWithRequestBuilder() -> RequestBuilder<[Image]> {
        let path = "/images"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Image]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single image by the given identifier. {id} is the identifier from our collections management system.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func imagesIdGet(_id: String, completion: @escaping ((_ data: [Image]?,_ error: Error?) -> Void)) {
        imagesIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single image by the given identifier. {id} is the identifier from our collections management system.
     - GET /images/{id}
     - examples: [{contentType=application/json, example=[ {
  "colorfulness" : { },
  "color" : { },
  "lake_guid" : { },
  "description" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "content" : { },
  "content_e_tag" : { },
  "copyright_notice" : { },
  "alt_text" : { },
  "fingerprint" : { },
  "api_link" : { },
  "artwork_ids" : { },
  "id" : { },
  "is_educational_resource" : { },
  "last_updated_source" : { },
  "lqip" : { },
  "height" : { },
  "timestamp" : { },
  "last_updated" : { },
  "is_multimedia_resource" : { },
  "iiif_url" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "width" : { },
  "artwork_titles" : { },
  "content_modified_at" : { },
  "is_teacher_resource" : { }
}, {
  "colorfulness" : { },
  "color" : { },
  "lake_guid" : { },
  "description" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "content" : { },
  "content_e_tag" : { },
  "copyright_notice" : { },
  "alt_text" : { },
  "fingerprint" : { },
  "api_link" : { },
  "artwork_ids" : { },
  "id" : { },
  "is_educational_resource" : { },
  "last_updated_source" : { },
  "lqip" : { },
  "height" : { },
  "timestamp" : { },
  "last_updated" : { },
  "is_multimedia_resource" : { },
  "iiif_url" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "width" : { },
  "artwork_titles" : { },
  "content_modified_at" : { },
  "is_teacher_resource" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[Image]> 
     */
    open class func imagesIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[Image]> {
        var path = "/images/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Image]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search images data in the aggregator. 
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func imagesSearchGet(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil, completion: @escaping ((_ data: [SearchResult]?,_ error: Error?) -> Void)) {
        imagesSearchGetWithRequestBuilder(q: q, query: query, sort: sort, from: from, size: size, facets: facets).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search images data in the aggregator. 
     - GET /images/search
     - examples: [{contentType=application/json, example=[ {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
}, {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
} ]}]
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)

     - returns: RequestBuilder<[SearchResult]> 
     */
    open class func imagesSearchGetWithRequestBuilder(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil) -> RequestBuilder<[SearchResult]> {
        let path = "/images/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "query": query, 
                        "sort": sort, 
                        "from": from, 
                        "size": size, 
                        "facets": facets
        ])

        let requestBuilder: RequestBuilder<[SearchResult]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all places sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func placesGet(completion: @escaping ((_ data: [Place]?,_ error: Error?) -> Void)) {
        placesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all places sorted by last updated date in descending order.
     - GET /places
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]

     - returns: RequestBuilder<[Place]> 
     */
    open class func placesGetWithRequestBuilder() -> RequestBuilder<[Place]> {
        let path = "/places"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Place]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single place by the given identifier. {id} is the identifier from our collections management system.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func placesIdGet(_id: String, completion: @escaping ((_ data: [Place]?,_ error: Error?) -> Void)) {
        placesIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single place by the given identifier. {id} is the identifier from our collections management system.
     - GET /places/{id}
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[Place]> 
     */
    open class func placesIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[Place]> {
        var path = "/places/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Place]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search places data in the aggregator. 
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func placesSearchGet(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil, completion: @escaping ((_ data: [SearchResult]?,_ error: Error?) -> Void)) {
        placesSearchGetWithRequestBuilder(q: q, query: query, sort: sort, from: from, size: size, facets: facets).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search places data in the aggregator. 
     - GET /places/search
     - examples: [{contentType=application/json, example=[ {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
}, {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
} ]}]
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)

     - returns: RequestBuilder<[SearchResult]> 
     */
    open class func placesSearchGetWithRequestBuilder(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil) -> RequestBuilder<[SearchResult]> {
        let path = "/places/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "query": query, 
                        "sort": sort, 
                        "from": from, 
                        "size": size, 
                        "facets": facets
        ])

        let requestBuilder: RequestBuilder<[SearchResult]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all sounds sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func soundsGet(completion: @escaping ((_ data: [Sound]?,_ error: Error?) -> Void)) {
        soundsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all sounds sorted by last updated date in descending order.
     - GET /sounds
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "transcript" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "transcript" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]

     - returns: RequestBuilder<[Sound]> 
     */
    open class func soundsGetWithRequestBuilder() -> RequestBuilder<[Sound]> {
        let path = "/sounds"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Sound]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single sound by the given identifier. {id} is the identifier from our collections management system.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func soundsIdGet(_id: String, completion: @escaping ((_ data: [Sound]?,_ error: Error?) -> Void)) {
        soundsIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single sound by the given identifier. {id} is the identifier from our collections management system.
     - GET /sounds/{id}
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "transcript" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "transcript" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "web_url" : { },
  "api_link" : { },
  "id" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "last_updated_source" : { },
  "timestamp" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[Sound]> 
     */
    open class func soundsIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[Sound]> {
        var path = "/sounds/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Sound]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search sounds data in the aggregator. 
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func soundsSearchGet(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil, completion: @escaping ((_ data: [SearchResult]?,_ error: Error?) -> Void)) {
        soundsSearchGetWithRequestBuilder(q: q, query: query, sort: sort, from: from, size: size, facets: facets).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search sounds data in the aggregator. 
     - GET /sounds/search
     - examples: [{contentType=application/json, example=[ {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
}, {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
} ]}]
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)

     - returns: RequestBuilder<[SearchResult]> 
     */
    open class func soundsSearchGetWithRequestBuilder(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil) -> RequestBuilder<[SearchResult]> {
        let path = "/sounds/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "query": query, 
                        "sort": sort, 
                        "from": from, 
                        "size": size, 
                        "facets": facets
        ])

        let requestBuilder: RequestBuilder<[SearchResult]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all texts sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func textsGet(completion: @escaping ((_ data: [Text]?,_ error: Error?) -> Void)) {
        textsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all texts sorted by last updated date in descending order.
     - GET /texts
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "is_multimedia_resource" : { },
  "lake_guid" : { },
  "description" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "content" : { },
  "content_e_tag" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "copyright_notice" : { },
  "alt_text" : { },
  "api_link" : { },
  "artwork_titles" : { },
  "content_modified_at" : { },
  "artwork_ids" : { },
  "id" : { },
  "is_educational_resource" : { },
  "last_updated_source" : { },
  "is_teacher_resource" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "is_multimedia_resource" : { },
  "lake_guid" : { },
  "description" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "content" : { },
  "content_e_tag" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "copyright_notice" : { },
  "alt_text" : { },
  "api_link" : { },
  "artwork_titles" : { },
  "content_modified_at" : { },
  "artwork_ids" : { },
  "id" : { },
  "is_educational_resource" : { },
  "last_updated_source" : { },
  "is_teacher_resource" : { },
  "timestamp" : { }
} ]}]

     - returns: RequestBuilder<[Text]> 
     */
    open class func textsGetWithRequestBuilder() -> RequestBuilder<[Text]> {
        let path = "/texts"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Text]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single text by the given identifier. {id} is the identifier from our collections management system.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func textsIdGet(_id: String, completion: @escaping ((_ data: [Text]?,_ error: Error?) -> Void)) {
        textsIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single text by the given identifier. {id} is the identifier from our collections management system.
     - GET /texts/{id}
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "is_multimedia_resource" : { },
  "lake_guid" : { },
  "description" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "content" : { },
  "content_e_tag" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "copyright_notice" : { },
  "alt_text" : { },
  "api_link" : { },
  "artwork_titles" : { },
  "content_modified_at" : { },
  "artwork_ids" : { },
  "id" : { },
  "is_educational_resource" : { },
  "last_updated_source" : { },
  "is_teacher_resource" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "is_multimedia_resource" : { },
  "lake_guid" : { },
  "description" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "content" : { },
  "content_e_tag" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "copyright_notice" : { },
  "alt_text" : { },
  "api_link" : { },
  "artwork_titles" : { },
  "content_modified_at" : { },
  "artwork_ids" : { },
  "id" : { },
  "is_educational_resource" : { },
  "last_updated_source" : { },
  "is_teacher_resource" : { },
  "timestamp" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[Text]> 
     */
    open class func textsIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[Text]> {
        var path = "/texts/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Text]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search texts data in the aggregator. 
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func textsSearchGet(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil, completion: @escaping ((_ data: [SearchResult]?,_ error: Error?) -> Void)) {
        textsSearchGetWithRequestBuilder(q: q, query: query, sort: sort, from: from, size: size, facets: facets).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search texts data in the aggregator. 
     - GET /texts/search
     - examples: [{contentType=application/json, example=[ {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
}, {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
} ]}]
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)

     - returns: RequestBuilder<[SearchResult]> 
     */
    open class func textsSearchGetWithRequestBuilder(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil) -> RequestBuilder<[SearchResult]> {
        let path = "/texts/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "query": query, 
                        "sort": sort, 
                        "from": from, 
                        "size": size, 
                        "facets": facets
        ])

        let requestBuilder: RequestBuilder<[SearchResult]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A list of all videos sorted by last updated date in descending order.

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosGet(completion: @escaping ((_ data: [Video]?,_ error: Error?) -> Void)) {
        videosGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A list of all videos sorted by last updated date in descending order.
     - GET /videos
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "is_multimedia_resource" : { },
  "lake_guid" : { },
  "description" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "content" : { },
  "content_e_tag" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "copyright_notice" : { },
  "alt_text" : { },
  "api_link" : { },
  "artwork_titles" : { },
  "content_modified_at" : { },
  "artwork_ids" : { },
  "id" : { },
  "is_educational_resource" : { },
  "last_updated_source" : { },
  "is_teacher_resource" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "is_multimedia_resource" : { },
  "lake_guid" : { },
  "description" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "content" : { },
  "content_e_tag" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "copyright_notice" : { },
  "alt_text" : { },
  "api_link" : { },
  "artwork_titles" : { },
  "content_modified_at" : { },
  "artwork_ids" : { },
  "id" : { },
  "is_educational_resource" : { },
  "last_updated_source" : { },
  "is_teacher_resource" : { },
  "timestamp" : { }
} ]}]

     - returns: RequestBuilder<[Video]> 
     */
    open class func videosGetWithRequestBuilder() -> RequestBuilder<[Video]> {
        let path = "/videos"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Video]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     A single video by the given identifier. {id} is the identifier from our collections management system.
     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosIdGet(_id: String, completion: @escaping ((_ data: [Video]?,_ error: Error?) -> Void)) {
        videosIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     A single video by the given identifier. {id} is the identifier from our collections management system.
     - GET /videos/{id}
     - examples: [{contentType=application/json, example=[ {
  "last_updated" : { },
  "is_multimedia_resource" : { },
  "lake_guid" : { },
  "description" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "content" : { },
  "content_e_tag" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "copyright_notice" : { },
  "alt_text" : { },
  "api_link" : { },
  "artwork_titles" : { },
  "content_modified_at" : { },
  "artwork_ids" : { },
  "id" : { },
  "is_educational_resource" : { },
  "last_updated_source" : { },
  "is_teacher_resource" : { },
  "timestamp" : { }
}, {
  "last_updated" : { },
  "is_multimedia_resource" : { },
  "lake_guid" : { },
  "description" : { },
  "suggest_autocomplete_all" : { },
  "title" : { },
  "type" : { },
  "content" : { },
  "content_e_tag" : { },
  "suggest_autocomplete_boosted" : { },
  "api_model" : { },
  "copyright_notice" : { },
  "alt_text" : { },
  "api_link" : { },
  "artwork_titles" : { },
  "content_modified_at" : { },
  "artwork_ids" : { },
  "id" : { },
  "is_educational_resource" : { },
  "last_updated_source" : { },
  "is_teacher_resource" : { },
  "timestamp" : { }
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[Video]> 
     */
    open class func videosIdGetWithRequestBuilder(_id: String) -> RequestBuilder<[Video]> {
        var path = "/videos/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Video]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search videos data in the aggregator. 
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videosSearchGet(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil, completion: @escaping ((_ data: [SearchResult]?,_ error: Error?) -> Void)) {
        videosSearchGetWithRequestBuilder(q: q, query: query, sort: sort, from: from, size: size, facets: facets).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search videos data in the aggregator. 
     - GET /videos/search
     - examples: [{contentType=application/json, example=[ {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
}, {
  "api_id" : { },
  "thumbnail" : { },
  "api_model" : { },
  "is_boosted" : { },
  "api_link" : { },
  "id" : { },
  "_score" : { },
  "title" : { },
  "timestamp" : { }
} ]}]
     - parameter q: (query) Your search query (optional)     - parameter query: (query) For complex queries, you can pass Elasticsearch domain syntax queries here (optional)     - parameter sort: (query) Used in conjunction with &#x60;query&#x60; (optional)     - parameter from: (query) Starting point of results. Pagination via Elasticsearch conventions (optional)     - parameter size: (query) Number of results to return. Pagination via Elasticsearch conventions (optional)     - parameter facets: (query) A comma-separated list of &#x27;count&#x27; aggregation facets to include in the results. (optional)

     - returns: RequestBuilder<[SearchResult]> 
     */
    open class func videosSearchGetWithRequestBuilder(q: String? = nil, query: String? = nil, sort: String? = nil, from: Int? = nil, size: Int? = nil, facets: String? = nil) -> RequestBuilder<[SearchResult]> {
        let path = "/videos/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "query": query, 
                        "sort": sort, 
                        "from": from, 
                        "size": size, 
                        "facets": facets
        ])

        let requestBuilder: RequestBuilder<[SearchResult]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
