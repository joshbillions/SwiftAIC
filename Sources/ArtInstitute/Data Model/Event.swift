//
// Event.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public struct Event: Codable {

    /** Unique identifier of this resource. Taken from the source system. */
    public let _id: Int

    /** REST API resource type or endpoint */
    public let apiModel: String

    /** REST API link for this resource */
    public let apiLink: String

    /** The name of this resource */
    public let title: String

    /** The name of this event formatted with HTML (optional) */
    public let titleDisplay: String?

    /** Whether the event is published on the website */
    public let published: Bool?

    /** The URL of an image representing this page */
    public let imageUrl: URL?

    /** Text displayed with the hero image on the event */
    public let heroCaption: String?

    /** Brief description of the event */
    public let shortDescription: String?

    /** Brief description of the event displayed below the title */
    public let headerDescription: String?

    /** One-sentence description of the event displayed in listings */
    public let listDescription: String?

    /** All copytext of the event */
    public let _description: String?

    /** Where the event takes place */
    public let location: String?

    /** Unique identifier indicating the preferred type of this event */
    public let eventTypeId: Int?

    /** Unique identifiers indicating the alternate types of this event */
    public let altEventTypeIds: [Int]?

    /** Unique identifier indicating the preferred audience for this event */
    public let audienceId: Int?

    /** Unique identifiers indicating the alternate audiences for this event */
    public let altAudienceIds: [Int]?

    /** Unique identifiers indicating the programs this event is a part of */
    public let programIds: [Int]?

    /** Titles of the programs this event is a part of */
    public let programTitles: [String]?

    /** Whether a ticket is required to attend the event */
    public let isTicketed: Bool?

    /** Unique identifier of the event in the ticketing system this website event is tied to */
    public let ticketedEventId: Int?

    /** The URL to the sales site for this event */
    public let rsvpLink: URL?

    /** The text used on the ticket/registration button */
    public let buyButtonText: String?

    /** Additional text below the ticket/registration button */
    public let buyButtonCaption: String?

    /** Whether registration is required to attend the event */
    public let isRegistrationRequired: Bool?

    /** Whether the event is exclusive to members of the museum */
    public let isMemberExclusive: Bool?

    /** Whether the event is sold out */
    public let isSoldOut: Bool?

    /** Whether the event is free */
    public let isFree: Bool?

    /** Whether the event is private */
    public let isPrivate: Bool?

    /** Whether admission to the museum is required to attend this event */
    public let isAdmissionRequired: Bool?

    /** Whether the event is to be held after the museum closes */
    public let isAfterHours: Bool?

    /** The date the event begins */
    public let startDate: Date?

    /** The date the event ends */
    public let endDate: Date?

    /** The time the event starts */
    public let startTime: String?

    /** The time the event ends */
    public let endTime: String?

    /** A readable display of the event dates */
    public let dateDisplay: String?

    /** The time the doors open for this event */
    public let doorTime: String?

    /** Number indicating the type of layout this event page uses */
    public let layoutType: Int?

    /** A string used in the URL for this event */
    public let slug: String?

    /** Which entrance to use for this event */
    public let entrance: String?

    /** URL to the membership signup page via this event */
    public let joinUrl: URL?

    /** URL to the survey associated with this event */
    public let surveyUrl: URL?

    /** Whether to include the presented-by-host message in emails */
    public let showPresentedBy: Bool?

    /** Unique identifier of the host (cf. event programs) that is presenting this event */
    public let eventHostId: Int?

    /** Unique identifier of the host (cf. event programs) that is presenting this event */
    public let eventHostTitle: String?

    /** Unique identifier of the sponsor this website event is tied to */
    public let sponsorId: Int?

    /** Email addresses to target for email series tests */
    public let testEmails: [String]?

    /** The date a page was, or will be, published */
    public let publishStartDate: Date?

    /** The date a page was, or will be, unpublished */
    public let publishEndDate: Date?

    /** Editor-specified list of tags to aid in internal search */
    public let searchTags: [String]?

    /** Date and time the resource was updated in the source system */
    public let lastUpdatedSource: Date?

    /** Date and time the record was updated in the aggregator database */
    public let lastUpdated: Date?

    /** Date and time the record was updated in the aggregator search index */
    public let timestamp: Date?

    public enum CodingKeys: String, CodingKey { 
        case _id = "id"
        case apiModel = "api_model"
        case apiLink = "api_link"
        case title
        case titleDisplay = "title_display"
        case published
        case imageUrl = "image_url"
        case heroCaption = "hero_caption"
        case shortDescription = "short_description"
        case headerDescription = "header_description"
        case listDescription = "list_description"
        case _description = "description"
        case location
        case eventTypeId = "event_type_id"
        case altEventTypeIds = "alt_event_type_ids"
        case audienceId = "audience_id"
        case altAudienceIds = "alt_audience_ids"
        case programIds = "program_ids"
        case programTitles = "program_titles"
        case isTicketed = "is_ticketed"
        case ticketedEventId = "ticketed_event_id"
        case rsvpLink = "rsvp_link"
        case buyButtonText = "buy_button_text"
        case buyButtonCaption = "buy_button_caption"
        case isRegistrationRequired = "is_registration_required"
        case isMemberExclusive = "is_member_exclusive"
        case isSoldOut = "is_sold_out"
        case isFree = "is_free"
        case isPrivate = "is_private"
        case isAdmissionRequired = "is_admission_required"
        case isAfterHours = "is_after_hours"
        case startDate = "start_date"
        case endDate = "end_date"
        case startTime = "start_time"
        case endTime = "end_time"
        case dateDisplay = "date_display"
        case doorTime = "door_time"
        case layoutType = "layout_type"
        case slug
        case entrance
        case joinUrl = "join_url"
        case surveyUrl = "survey_url"
        case showPresentedBy = "show_presented_by"
        case eventHostId = "event_host_id"
        case eventHostTitle = "event_host_title"
        case sponsorId = "sponsor_id"
        case testEmails = "test_emails"
        case publishStartDate = "publish_start_date"
        case publishEndDate = "publish_end_date"
        case searchTags = "search_tags"
        case lastUpdatedSource = "last_updated_source"
        case lastUpdated = "last_updated"
        case timestamp
    }

}
